# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0
[project]
name = "dvsim"
version = "0.1.0"
description = "DV system"
authors = [{name = "lowRISC contributors (OpenTitan project)"}]
readme = "README.md"
licence = "Apache-2.0"
dependencies = [
    "click>=8.1.7",
    "enlighten>=1.12.4",
    "hjson>=3.1.0",
    "logzero>=1.7.0",
    "mistletoe>=1.4.0",
    "premailer>=3.10.0",
    "pydantic>=2.9.2",
    "pyyaml>=6.0.2",
    "tabulate>=0.9.0",
    "toml>=0.10.2",
]
requires-python = ">=3.10"

[project.optional-dependencies]
typing = [
    "pyright>=1.1.381",
]
linting = [
    "ruff>=0.6.7",
]
test = [
    "pyhamcrest>=2.1.0",
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
]
dev = ["dvsim[linting,typing,test]"]
ci = [
    "dvsim[linting,typing,test]",
    "python-semantic-release",
]

# drop out ruff as it contains a rust binary that needs to be installed by the flake
nix = [
    "dvsim[typing,test]",
    "python-semantic-release",
]


[project.scripts]
dvsim = "dvsim.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pyright]
include = ["src"]
reportMissingImports = "error"
reportMissingTypeStubs = false
venv = ".venv"
executionEnvironments = [
    { root = "src" },
]

[tool.ruff]
target-version = "py310"
line-length = 100
extend-exclude = [
]

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
select = ["ALL"]
extend-select = ["W391", "E303"]
allowed-confusables = ["âˆ’"]
ignore = [
    "D203", "D213", "COM812", "ISC001",
    "FIX", "TD", "S603", "S607",
]

[tool.pytest.ini_options]
addopts = "--cov=dvsim --cov-report term-missing"


[tool.uv]
dev-dependencies = [
    "ipython>=8.18.1",
]

[tool.semantic_release]
assets = []
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = false
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.master]
match = "master"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "build", "refactor"]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

